@startuml ChatView and AIProvider Interaction with ContextManager

' Main components
[Chat View] as ChatView
[AI Provider] as AIProvider
[Context Manager] as ContextManager
[File System] as FileSystem
[VS Code API] as VSCodeAPI
cloud "Anthropic API" as AnthropicAPI
actor User

' User interactions with ChatView
User --> ChatView : 1. Enters prompt
User --> ChatView : 2. Adds context files/folders
User --> ChatView : 3. Uploads images

' ChatView to ContextManager interactions
ChatView --> ContextManager : 4a. addToSelectedContext()
ChatView --> ContextManager : 4b. removeFromSelectedContext()
ChatView --> ContextManager : 4c. getSelectedContextItems()
ChatView --> ContextManager : 4d. getRelevantContext(query)
ChatView --> ContextManager : 4e. addImageToContext()

' ContextManager internal operations
ContextManager --> FileSystem : 5a. Reads file content
ContextManager --> FileSystem : 5b. Analyzes directories
ContextManager --> FileSystem : 5c. Checks gitignore rules
ContextManager --> VSCodeAPI : 5d. Stores metadata in globalState

' ChatView to AIProvider interactions
ChatView --> AIProvider : 6. generateResponse(prompt, contextItems)

' AIProvider to ContextManager interactions
AIProvider --> ContextManager : 7a. prepareContextText()
AIProvider --> ContextManager : 7b. addToHistory()

' AIProvider to Anthropic API
AIProvider --> AnthropicAPI : 8. Send request with context
AnthropicAPI --> AIProvider : 9. Stream response
AIProvider --> ChatView : 10. Stream partial responses

' Detailed flow notes
note right of ChatView
  When user sends a message:
  1. ChatView calls contextManager.getRelevantContext()
  2. This returns context items based on:
     - Selected files/folders
     - Query relevance
     - Image context
  3. ChatView passes context to AIProvider
end note

note right of ContextManager
  Context selection process:
  1. User selects files/folders via UI
  2. ContextManager analyzes and scores files
  3. Metadata is stored in VS Code globalState
  4. When a query is made, files are scored
     by relevance to the query
end note

note right of AIProvider
  Context processing:
  1. Receives context items from ChatView
  2. Prepares context for Anthropic API
  3. Handles token limits and batching
  4. Streams responses back to ChatView
end note

@enduml